---
title: "Working with grant-based roles and advanced user management"
subtitle: "ActivityInfo R demo: what's new since last year"
date: 2024-12-17
author: "Nicolas Dickinson, WASHNote"
format: 
  pptx: default
  revealjs:
    theme: serif
editor: visual
execute:
  echo: true
  output: false
---

# Introduction

---

## Agenda

-   What changed in the last year?
-   Form manipulation and data download
-   Grant-based roles
-   Bulk update/deactivate/delete users

---

## What changed (1)

-   Grant-based role support has been added
-   New tutorials:
    -   Working with grant-based roles
    -   Advanced user management: bulk add and delete users
    -   Advanced use-cases with roles

---

## What changed (2)

-   `getRecords()` is more robust
    -   Column de-duplication
    -   Handles cyclic references and has a `maxDepth` parameter
-   New billing account functions to manage databases
-   Improved credentials management: API tokens are now stored per ActivityInfo server

## Up next in 2025

- Uploading attachments
- Support for ActivityInfo formulas in `filter()` and `mutate()` for prepared views on the server
- Column auto-completion and expansion into parent forms, sub-forms, reference forms, etc.
    `records %>% mutate(child_name = records$child$childName)`

# Installation and authentication

## Loading ActivityInfo and tidyverse 

```{r}
#| echo: true
#| eval: false
library(activityinfo)
library(tidyverse)

# Or one can explicitly include specific tidyverse packages:
library(dplyr)
library(tidyr)
library(purrr)
```

# Working with grant-based roles tutorial

## Create a database

```{r}
#| echo: true
#| eval: false
library(activityinfo)

# We can use these options to turn on and off debugging messages
# Useful for logging on servers
options(activityinfo.verbose.requests = FALSE) # http requests
options(activityinfo.verbose.tasks = FALSE) # responses to different tasks

newDb <- addDatabase(
    label = 
      sprintf(
        "Demo database %s", 
        as.POSIXlt(Sys.time(), "UTC", "%Y-%m-%dT%H:%M")
        )
  )

databaseId <- newDb$databaseId
```

## Create a form fields

```{r}
#| echo: true
#| eval: false

formElements = list(
    textFieldSchema(
      label = "What is your name?",
      code = "NAME",
      description = "Please provide your full name",
      required = TRUE
    ),
    singleSelectFieldSchema(
      label = "What is your sex?",
      code = "SEX",
      options = c("Female", "Male", "Prefer not to answer"),
      required = TRUE
    ),
    singleSelectFieldSchema(
      label = "Are you pregnant",
      relevanceRule = "SEX != 'Male'",
      options = c("Yes", "No"),
      required = TRUE
    )
  )

```

## Add the form to the database

```{r}
#| echo: true
#| eval: false

surveySchema <- formSchema(
  databaseId = databaseId,
  label = "My new survey",
  element <- formElements
)

surveyForm <- addForm(surveySchema)
```

## Create form with chaining |>

```{r}
#| echo: true
#| eval: false

# Or we can split it up and use chaining to build and upload our form
optionalForm <- 
  formSchema(databaseId = newDb$databaseId, label = "An optional form") |>
  addFormField(feedbacktextFieldSchema(label = "Anonymous feedback", code = "feedback")) |>
  addForm()

```

## Fetch database tree and system roles

### The database metadata

```{r}
#| echo: true
#| eval: false
dbTree <- getDatabaseTree(databaseId = newDb$databaseId)
as_tibble(dbTree$ownerRef)
```

### The roles as a table

```{r}
#| echo: true
#| eval: false
roles <- getDatabaseRoles(dbTree)
roles
```

## Expand Administrative Permissions on the Database

```{r}
#| echo: true
#| eval: false
roles |> 
  tidyr::unnest_longer(permissions) |> 
  tidyr::unnest_wider(permissions) |> 
  select(id, label, operation)
```

## List role grants

A grant can be for a resource: 

- Database, 
- Folder, or 
- Form.

The `resourceId` in these default roles is the `databaseId`.

```{r}
#| echo: true
#| eval: false
roles |> 
  select(id, label, grants) |> 
  tidyr::unnest_longer(grants) |> 
  tidyr::unnest_wider(grants)
```



## Expand Grants and Operations

```{r}
#| echo: true
#| eval: false
roles |> 
  select(id, label, grants) |> 
  tidyr::unnest_longer(grants) |> 
  tidyr::unnest_wider(grants) |> 
  tidyr::unnest_longer(operations) |> 
  tidyr::unnest_wider(operations) |> 
  select(id, label, resourceId, operation)
```



## Retrieve a Single Role

```{r}
#| echo: true
#| eval: false
readOnlyRole <- Filter(function(x) x$id == "readonly", dbTree$roles)
str(readOnlyRole)
```



## Add Users in Bulk

### Default role and load user data

```{r}
#| echo: true
#| eval: false
defaultRoleId = "readonly" # Default role for all new users

users <- data.frame(
  name = paste0("Person ", 1:10),
  email = paste0("dickinson+person", 1:10, "@washnote.com"),
  stringsAsFactors = FALSE
)

```

### Adding

```{r}
#| echo: true
#| eval: false

for (i in seq_len(nrow(users))) {
  addDatabaseUser(databaseId = databaseId,
            email = users[i,"email"],
            name = users[i,"name"],
            roleId = defaultRoleId)
}
```


## Inspect Role Assignments

```{r}
#| echo: true
#| eval: false
dbUserRoles <- getDatabaseUsers(dbTree$databaseId) |> unnest_wider(role, names_sep = "_")
dbUserRoles
```

## Create Role 1: Deny permission to delete

This is a resource level permission that we will apply to our survey form:

```{r}
#| echo: true
#| eval: false
dataEntryFormId <- surveySchema$id

noDeletePermissions = resourcePermissions(
        view = TRUE,
        add_record = TRUE,
        edit_record = TRUE,
        delete_record = FALSE, # this prevents deletion
        export_records = TRUE),
      optional = FALSE
    )

```

## Create role 1: Create and update role

```{r}
#| echo: true
#| eval: false
dataEntryNoDeleteRole <- role(
  id = "entrynodelete",
  label = "Data entry without delete",
  grants = list(
    grant(
      resourceId = dataEntryFormId, 
      permissions = noDeletePermissions # we created this
  )
)

updateRole(dbTree$databaseId, dataEntryNoDeleteRole)
```

## Create role 2: Admin Without Automation

These permissions affect the whole database, not just resources.

```{r}
#| echo: false
#| eval: false

dbAdminGrants <- list(
    grant(
      resourceId = dbTree$databaseId, 
      permissions = adminResourcePermissions, # create this by setting all permissions to TRUE
      optional = FALSE
    )
  )

adminResourcePermissions <- resourcePermissions(
        view = TRUE,
        add_record = TRUE,
        edit_record = TRUE,
        delete_record = TRUE,
        export_records = TRUE,
        lock_records = TRUE,
        add_resource = TRUE,
        edit_resource = TRUE,
        delete_resource = TRUE,
        bulk_delete = TRUE,
        manage_collection_links = TRUE,
        manage_users = TRUE,
        manage_roles = TRUE,
        manage_reference_data = TRUE,
        manage_translations = TRUE,
        audit = TRUE,
        share_reports = TRUE,
        publish_reports = TRUE,
        reviewer_only = TRUE,
        discover = TRUE)

```


```{r}
#| echo: true
#| eval: false

dbPermissionWithoutAutomation <- databasePermissions(
    manage_automations = FALSE, manage_users = TRUE,
    manage_roles = TRUE)
adminRoleNoAutomation <- role(
  id = "adminnoautomation", label = "Admin without automation",
  permissions = dbPermissionWithoutAutomation, grants = dbAdminGrants)
addRole(dbTree$databaseId, adminRoleNoAutomation)
```

## Update Role with Optional Form Access

```{r}
#| echo: true
#| eval: false
optionalFormId <- optionalForm$id
optionalFormGrant <- grant(
      resourceId = optionalFormId, 
      permissions = resourcePermissions(view = TRUE, add_record = TRUE, edit_record = FALSE, delete_record = FALSE, export_records = FALSE),
      optional = TRUE # this makes the grant optional)
optionalAccessRole <- role(id = "optional", label = "Optional access to feedback from only",
  grants = list(optionalFormGrant)
)
updateRole(dbTree$databaseId, optionalAccessRole)
```

# Create Partner and Reporting forms and roles

## Partner Form

```{r}
#| echo: true
#| eval: false
partnerForm <- formSchema(
  databaseId = dbTree$databaseId, 
  label = "Reporting Partners") |>
  addFormField(textFieldSchema(code = "name", label = "Partner name", required = TRUE))

addForm(partnerForm)
partnerTbl <- tibble(name = c("Partner A", "Partner B", "Partner C"))
importRecords(partnerForm$id, data = partnerTbl)
```

## Reporting Form

```{r}
#| echo: true
#| eval: false
reportingForm <- formSchema(
  databaseId = dbTree$databaseId, 
  label = "Partner reports") |>
  addFormField(referenceFieldSchema(referencedFormId = partnerForm$id, code = "rp", label = "Partner", required = TRUE)) |>
  addFormField(textFieldSchema(label = "Report", required = TRUE))
addForm(reportingForm)
```

## Partner form

```{r}
#| echo: true
#| eval: false
partnerTbl <- getRecords(partnerForm) |> collect()
# Generate reports and import records using the partner ID to link to partners
partnerReports <- paste0("This is a report from ", partnerTbl[["Partner name"]], ".")
reportingTbl <- tibble(Partner = partnerTbl[["_id"]], Report = partnerReports)
importRecords(reportingForm$id, data = reportingTbl)
```


## Create a parameter and  grant

We need a partner parameter so we know the user's organization to create a grant that limits access to only reports from one's own organization.

```{r}
#| echo: true
#| eval: false
partnerParameter <- parameter(id = "partner", label = "Partner", range = partnerForm$id)
reportGrant <- grant(resourceId = reportingForm$id, permissions = resourcePermissions(
      view = sprintf("%s == @user.partner", partnerForm$id),
      edit_record = sprintf("%s == @user.partner", partnerForm$id),
      discover = TRUE,
      export_records = TRUE))
```


## Define Reporting Partner Role

```{r}
#| echo: true
#| eval: false
reportingPartnerRole <- role(id = "rp", label = "Reporting Partner",
  parameters = list(partnerParameter),
  grants = list(
    grant(resourceId = dbTree$databaseId, permissions = resourcePermissions(view = TRUE)),
    reportGrant))
addRole(dbTree$databaseId, reportingPartnerRole)
```

## Add Users with Roles

```{r}
#| echo: true
#| eval: false
partnerAId <- partnerTbl |> filter(`Partner name` == "Partner A") |> pull(`_id`)

addDatabaseUser(
  databaseId = dbTree$databaseId, 
  email = "user.a@example.com", 
  name = "User A", 
  roleId = "rp", 
  roleParameters = list(partner = partnerAId)
)
```

# Getting records

## getRecords()

-   `getRecords()` is a user-friendly and tidyverse compatible replacement for `queryTable()`
-   Use `collect()` to download to a data frame.

```{r}
#| echo: true
#| eval: false
#| output: false
#| warning: true

# the base pipe |> is available from R4.1. 
# Otherwise use the maggitr pipe %>%.
records_df <- 
  getRecords("ceam1x8kq6ikcujg") |> 
  select(ends_with("Name")) |>
  collect()

records_df
```

### Columns as requested

![](images/image-1149861727.png){width="100%"}

## Manipulate the data frame as usual after `collect()`

```{r}
#| echo: true
#| eval: false
records_df |> 
  filter(`Sub-sector Name`=="Nutrition") |>
  arrange(`Organization Name`, `Admin 1 Name`, `Admin 2 Name`) |>
  slice_head(n=2) 
```

![](images/image-1315857030.png){width="100%"}

## Filter large data sets *before* downloading

It is possible to use some filters and limit the records before they are downloaded (with `collect()`).

```{r}
#| echo: true
#| eval: false
#| chunk_output_type: console
#| paged.print: false

# Taking away collect() results in a reference to the server instead of a data frame. information is displayed about the query being prepared.
getRecords("ceam1x8kq6ikcujg") |> 
  select(ends_with("Name")) |>  
  arrange(`Organization Name`) |> 
  filter(`Sector Name`=="Nutrition") |> 
  slice_head(n=2)
```

![](images/image-31871765.png){width="100%"}

## Limitations before `collect()`

Only `select()`, `filter()`, `arrange()`, `slice_head()`, and `slice_tail()` can be used before fetching records.

You must use the verbs in order: 1. `arrange()` (limited to a single column) and/or `dplyr::filter()` in any combination. 2. `slice_head()`, `slice_tail()` or `adjustWindow(x, offSet = 0L, limit)` in any combination 3. **Always end with `collect()`**

## More columns/different styles

Columns from `getRecords()` are as in the web UI by default with the addition of record id columns but can be modified with helper functions and the style argument:

-   `getRecords(x, style = prettyColumnStyle())` : the default style
-   `minimalColumnStyle()` : removes all ID columns not found in the web UI.

## Adding reference columns

Using styles, it is possible to include more columns from referenced tables to include regional codes from *Admin 1* and *Admin 2*:

```{r}
#| eval: false
#| output: true
getRecords("ceam1x8kq6ikcujg", 
           style = prettyColumnStyle(allReferenceFields = TRUE)) |> 
    select(ends_with("Name"), ends_with("CODE")) |>
    arrange(`Organization Name`)  |>
    filter(`Sector Name`=="Nutrition") |>
    slice_head(n=2) |> collect()
```

![](images/image-1014107121.png)

## Summary of getRecords()

-   Use the record id or a form tree to `getRecords()` and then `select()` columns to select and rename them. Use column styles for fine control.
-   Always end with `collect()` to continue analysis on a data frame.
-   If you are managing very large data sets and want to reduce download time, use `filter()` before `collect()`.

# Manipulating an existing ActivityInfo forms

## Manipulate existing elements and upload form

```{r}
#| echo: true
#| eval: false
fmSchema <- getFormSchema(surveySchema$id)
fmSchema$elements <- fmSchema$elements[c(1,3,2)]
fmSchema |>
  deleteFormField(code = "age")
addForm(fmSchema)
```

## Using getRecords() to copy form fields to a new form

```{r}
#| echo: true
#| eval: false

getRecords(surveyForm) |> 
  extractSchemaFromFields(
    databaseId, "Copied form", useColumnNames = TRUE
    ) |>
  addForm()
```
